/**
 * ES6 Set
 * 
 * ES6 提供了新的数据结构 Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。
 * 
 * Set本身是一个构造函数，用来生成 Set 数据结构。
 * */ 
/********
 * 
 * Set 实例的属性和方法
 * 
 * ******/ 
// 1.add (value)---方法向 Set 结构加入成员
const s = new Set();
[2, 3, 5, 4, 5, 2, 2].forEach(x => s.add(x));

// 2.new Set()
// Set函数可以接受一个数组（或者具有 iterable 接口的其他数据结构）作为参数，用来初始化。
const set = new Set([1, 2, 3, 4, 4]);

// 3.向 Set 加入值的时候，不会发生类型转换
// Set 内部判断两个值是否不同，使用的算法叫做“Same-value-zero equality”，
// 它类似于精确相等运算符（===），主要的区别是向 Set 加入值时认为NaN等于自身，
// 而精确相等运算符认为NaN不等于自身。

// 4.size --- 返回Set实例的成员总数。
s.add(1).add(2).add(2);
s.size // 2

// 5.delete(value) --- 删除某个值，返回一个布尔值，表示删除是否成功。

// 6.has(value) --- 返回一个布尔值，表示该值是否为Set的成员。

// 7.clear() --- 清除所有成员，没有返回值。

/******
 * 
 * 
 * Set遍历操作
 * 
 * 
 * *****/ 

 // 1.keys() --- 返回键名的遍历器
 // 2.values() --- 返回键值的遍历器
//  由于 Set 结构没有键名，只有键值（或者说键名和键值是同一个值）,所以keys方法和values方法的行为完全一致。
 // 3.entries() --- 返回键值对的遍历器
 // 4.forEach() --- 使用回调函数遍历每个成员

 // 5.for...of--遍历set数据结构

 //6.扩展运算符（...）内部使用for...of循环，所以也可以用于 Set 结构。
 let set = new Set(['red', 'green', 'blue']);
let arr = [...set];

/****************************************分割线**************************************************/

/**
 * 
 * WeakSet
 * WeakSet 结构与 Set 类似，也是不重复的值的集合
 * 
 * 它与 Set 有两个区别：
 * 1.WeakSet 的成员只能是对象，而不能是其他类型的值
 * 
 * 2.WeakSet 中的对象都是弱引用
 * 说明：即垃圾回收机制不考虑 WeakSet 对该对象的引用
 * 也就是说，如果其他对象都不再引用该对象，那么垃圾回收机制会自动回收该对象所占用的内存，不考虑该对象还存在于 WeakSet 之中。
 * 
 * */ 

// 1.WeakSet 是一个构造函数，可以使用new命令，创建 WeakSet 数据结构
const ws = new WeakSet();

const a = [[1, 2], [3, 4]];
const ws = new WeakSet(a);


//2.add(value)：向 WeakSet 实例添加一个新成员。

//3.delete(value)：清除 WeakSet 实例的指定成员。

//4.has(value)：返回一个布尔值，表示某个值是否在

// 5.WeakSet 没有size属性，没有办法遍历它的成员。


